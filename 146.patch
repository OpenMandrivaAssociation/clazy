From a0cba19dd2544591551569334a98798419dfefa4 Mon Sep 17 00:00:00 2001
From: Cristian Adam <cristian.adam@qt.io>
Date: Sat, 21 Sep 2024 18:15:08 +0200
Subject: [PATCH] Update to LLVM 19

Add ifdefs to take into consideration all the refactorings that
were done in LLVM 19.

Change-Id: I590b2b967645976662321eac432b18239ae5442e
---
 src/ClazyContext.cpp                          |  7 ++-
 src/ClazyContext.h                            | 45 +++++++++++++++++++
 src/ContextUtils.cpp                          |  8 +++-
 src/FixItExporter.cpp                         |  7 ++-
 src/MiniAstDumper.cpp                         |  8 +++-
 src/PreProcessorVisitor.cpp                   |  5 +++
 src/PreProcessorVisitor.h                     |  5 +++
 src/checkbase.cpp                             | 24 ++++++++++
 src/checkbase.h                               | 21 ++++++++-
 src/checks/level0/no-module-include.cpp       | 18 ++++++--
 src/checks/level0/no-module-include.h         |  5 +++
 src/checks/level0/qcolor-from-literal.cpp     | 10 ++++-
 .../manuallevel/qt6-deprecated-api-fixes.cpp  |  7 ++-
 src/checks/manuallevel/qt6-fwd-fixes.cpp      |  5 +++
 src/checks/manuallevel/qt6-fwd-fixes.h        |  5 +++
 src/checks/manuallevel/qt6-header-fixes.cpp   |  5 +++
 src/checks/manuallevel/qt6-header-fixes.h     |  5 +++
 17 files changed, 177 insertions(+), 13 deletions(-)

diff --git a/src/ClazyContext.cpp b/src/ClazyContext.cpp
index 3f0e9c8c..5e743840 100644
--- a/src/ClazyContext.cpp
+++ b/src/ClazyContext.cpp
@@ -47,7 +47,12 @@ ClazyContext::ClazyContext(const clang::CompilerInstance &compiler,
         if (exportFixesFilename.empty()) {
             // Only clazy-standalone sets the filename by argument.
             // clazy plugin sets it automatically here:
-            const FileEntry *fileEntry = sm.getFileEntryForID(sm.getMainFileID());
+#if LLVM_VERSION_MAJOR >= 19
+#define GET_FILE_ENTRY_FOR_ID getFileEntryRefForID
+#else
+#define GET_FILE_ENTRY_FOR_ID getFileEntryForID
+#endif
+            const auto fileEntry = sm.GET_FILE_ENTRY_FOR_ID(sm.getMainFileID());
             exportFixesFilename = fileEntry->getName().str() + ".clazy.yaml";
         }
 
diff --git a/src/ClazyContext.h b/src/ClazyContext.h
index ec0e10be..af0aa388 100644
--- a/src/ClazyContext.h
+++ b/src/ClazyContext.h
@@ -10,6 +10,7 @@
 #include "SuppressionManager.h"
 #include "clazy_stl.h"
 
+#include <clang/Basic/FileEntry.h>
 #include <clang/Basic/FileManager.h>
 #include <clang/Basic/SourceLocation.h>
 #include <clang/Basic/SourceManager.h>
@@ -96,6 +97,49 @@ public:
         return clazy::contains(extraOptions, optionName);
     }
 
+#if LLVM_VERSION_MAJOR >= 19
+    bool fileMatchesLoc(const std::unique_ptr<llvm::Regex> &regex, clang::SourceLocation loc, clang::OptionalFileEntryRef &file) const
+    {
+        if (!regex) {
+            return false;
+        }
+
+        if (!file) {
+            clang::FileID fid = sm.getDecomposedExpansionLoc(loc).first;
+            file = sm.getFileEntryRefForID(fid);
+            if (!file) {
+                return false;
+            }
+        }
+
+        llvm::StringRef fileName((*file).getName());
+        return regex->match(fileName);
+    }
+
+    bool shouldIgnoreFile(clang::SourceLocation loc) const
+    {
+        // 1. Process the regexp that excludes files
+        clang::OptionalFileEntryRef file;
+        if (ignoreDirsRegex) {
+            const bool matches = fileMatchesLoc(ignoreDirsRegex, loc, file);
+            if (matches) {
+                return true;
+            }
+        }
+
+        // 2. Process the regexp that includes files. Has lower priority.
+        if (!headerFilterRegex || isMainFile(loc)) {
+            return false;
+        }
+
+        const bool matches = fileMatchesLoc(headerFilterRegex, loc, file);
+        if (!file) {
+            return false;
+        }
+
+        return !matches;
+    }
+#else
     bool fileMatchesLoc(const std::unique_ptr<llvm::Regex> &regex, clang::SourceLocation loc, const clang::FileEntry **file) const
     {
         if (!regex) {
@@ -137,6 +181,7 @@ public:
 
         return !matches;
     }
+#endif
 
     bool isMainFile(clang::SourceLocation loc) const
     {
diff --git a/src/ContextUtils.cpp b/src/ContextUtils.cpp
index f30c4cb6..584e9279 100644
--- a/src/ContextUtils.cpp
+++ b/src/ContextUtils.cpp
@@ -80,8 +80,12 @@ std::string clazy::getMostNeededQualifiedName(const SourceManager &sourceManager
             if (sourceManager.isBeforeInSLocAddrSpace(usageLoc, u->getBeginLoc())) {
                 continue;
             }
-
-            visibleContexts.push_back(ns->getOriginalNamespace());
+#if LLVM_VERSION_MAJOR >= 19
+#define GET_ORIGINAL_NAMESPACE getFirstDecl
+#else
+#define GET_ORIGINAL_NAMESPACE getOriginalNamespace
+#endif
+            visibleContexts.push_back(ns->GET_ORIGINAL_NAMESPACE());
         }
     }
 
diff --git a/src/FixItExporter.cpp b/src/FixItExporter.cpp
index 334889e4..c1f224d4 100644
--- a/src/FixItExporter.cpp
+++ b/src/FixItExporter.cpp
@@ -55,7 +55,12 @@ void FixItExporter::BeginSourceFile(const LangOptions &LangOpts, const Preproces
     }
 
     const auto id = SourceMgr.getMainFileID();
-    const auto *const entry = SourceMgr.getFileEntryForID(id);
+#if LLVM_VERSION_MAJOR >= 19
+#define GET_FILE_ENTRY_FOR_ID getFileEntryRefForID
+#else
+#define GET_FILE_ENTRY_FOR_ID getFileEntryForID
+#endif
+    const auto entry = SourceMgr.GET_FILE_ENTRY_FOR_ID(id);
     getTuDiag().MainSourceFile = static_cast<std::string>(entry->getName());
 }
 
diff --git a/src/MiniAstDumper.cpp b/src/MiniAstDumper.cpp
index 42fcfc65..bda179e1 100644
--- a/src/MiniAstDumper.cpp
+++ b/src/MiniAstDumper.cpp
@@ -52,7 +52,13 @@ bool MiniASTDumperConsumer::VisitStmt(Stmt *)
 void MiniASTDumperConsumer::HandleTranslationUnit(ASTContext &ctx)
 {
     auto &sm = ctx.getSourceManager();
-    const FileEntry *fileEntry = sm.getFileEntryForID(sm.getMainFileID());
+
+#if LLVM_VERSION_MAJOR >= 19
+#define GET_FILE_ENTRY_FOR_ID getFileEntryRefForID
+#else
+#define GET_FILE_ENTRY_FOR_ID getFileEntryForID
+#endif
+    const auto fileEntry = sm.GET_FILE_ENTRY_FOR_ID(sm.getMainFileID());
     llvm::errs() << "Found TU: " << fileEntry->getName() << "\n";
     TraverseDecl(ctx.getTranslationUnitDecl());
 }
diff --git a/src/PreProcessorVisitor.cpp b/src/PreProcessorVisitor.cpp
index 8687ef5d..89e9b0cb 100644
--- a/src/PreProcessorVisitor.cpp
+++ b/src/PreProcessorVisitor.cpp
@@ -183,7 +183,12 @@ void PreProcessorVisitor::InclusionDirective(clang::SourceLocation,
                                              clazy::OptionalFileEntryRef,
                                              clang::StringRef,
                                              clang::StringRef,
+#if LLVM_VERSION_MAJOR >= 19
                                              const clang::Module *,
+                                             bool,
+#else
+                                             const clang::Module *,
+#endif
                                              clang::SrcMgr::CharacteristicKind)
 {
     if (m_ci.getPreprocessor().isInPrimaryFile() && !clazy::endsWith(FileName.str(), ".moc")) {
diff --git a/src/PreProcessorVisitor.h b/src/PreProcessorVisitor.h
index 10f32066..019e41d3 100644
--- a/src/PreProcessorVisitor.h
+++ b/src/PreProcessorVisitor.h
@@ -68,7 +68,12 @@ protected:
                             clazy::OptionalFileEntryRef File,
                             clang::StringRef SearchPath,
                             clang::StringRef RelativePath,
+#if LLVM_VERSION_MAJOR >= 19
+                            const clang::Module *SuggestedModule,
+                            bool ModuleImported,
+#else
                             const clang::Module *Imported,
+#endif
                             clang::SrcMgr::CharacteristicKind FileType) override;
 
 private:
diff --git a/src/checkbase.cpp b/src/checkbase.cpp
index 1fef0c96..f2c16e39 100644
--- a/src/checkbase.cpp
+++ b/src/checkbase.cpp
@@ -95,10 +95,29 @@ void ClazyPreprocessorCallbacks::InclusionDirective(clang::SourceLocation HashLo
                                                     clazy::OptionalFileEntryRef File,
                                                     clang::StringRef SearchPath,
                                                     clang::StringRef RelativePath,
+#if LLVM_VERSION_MAJOR >= 19
+                                                    const clang::Module *SuggestedModule,
+                                                    bool ModuleImported,
+#else
                                                     const clang::Module *Imported,
+#endif
                                                     clang::SrcMgr::CharacteristicKind FileType)
 {
+#if LLVM_VERSION_MAJOR >= 19
+    check->VisitInclusionDirective(HashLoc,
+                                   IncludeTok,
+                                   FileName,
+                                   IsAngled,
+                                   FilenameRange,
+                                   File,
+                                   SearchPath,
+                                   RelativePath,
+                                   SuggestedModule,
+                                   ModuleImported,
+                                   FileType);
+#else
     check->VisitInclusionDirective(HashLoc, IncludeTok, FileName, IsAngled, FilenameRange, File, SearchPath, RelativePath, Imported, FileType);
+#endif
 }
 
 CheckBase::CheckBase(const std::string &name, const ClazyContext *context, Options options)
@@ -179,7 +198,12 @@ void CheckBase::VisitInclusionDirective(clang::SourceLocation,
                                         clazy::OptionalFileEntryRef,
                                         clang::StringRef,
                                         clang::StringRef,
+#if LLVM_VERSION_MAJOR >= 19
                                         const clang::Module *,
+                                        bool,
+#else
+                                        const clang::Module *,
+#endif
                                         clang::SrcMgr::CharacteristicKind)
 {
     // Overriden in derived classes
diff --git a/src/checkbase.h b/src/checkbase.h
index d3616ea9..128ce754 100644
--- a/src/checkbase.h
+++ b/src/checkbase.h
@@ -95,9 +95,13 @@ public:
                             clazy::OptionalFileEntryRef File,
                             clang::StringRef SearchPath,
                             clang::StringRef RelativePath,
+#if LLVM_VERSION_MAJOR >= 19
+                            const clang::Module *SuggestedModule,
+                            bool ModuleImported,
+#else
                             const clang::Module *Imported,
+#endif
                             clang::SrcMgr::CharacteristicKind FileType) override;
-
 private:
     CheckBase *const check;
 };
@@ -157,6 +161,19 @@ protected:
     VisitElif(clang::SourceLocation loc, clang::SourceRange conditionRange, clang::PPCallbacks::ConditionValueKind ConditionValue, clang::SourceLocation ifLoc);
     virtual void VisitElse(clang::SourceLocation loc, clang::SourceLocation ifLoc);
     virtual void VisitEndif(clang::SourceLocation loc, clang::SourceLocation ifLoc);
+#if LLVM_VERSION_MAJOR >= 19
+    virtual void VisitInclusionDirective(clang::SourceLocation HashLoc,
+                                         const clang::Token &IncludeTok,
+                                         clang::StringRef FileName,
+                                         bool IsAngled,
+                                         clang::CharSourceRange FilenameRange,
+                                         clazy::OptionalFileEntryRef File,
+                                         clang::StringRef SearchPath,
+                                         clang::StringRef RelativePath,
+                                         const clang::Module *SuggestedModule,
+                                         bool ModuleImported,
+                                         clang::SrcMgr::CharacteristicKind FileType);
+#else
     virtual void VisitInclusionDirective(clang::SourceLocation HashLoc,
                                          const clang::Token &IncludeTok,
                                          clang::StringRef FileName,
@@ -167,7 +184,7 @@ protected:
                                          clang::StringRef RelativePath,
                                          const clang::Module *Imported,
                                          clang::SrcMgr::CharacteristicKind FileType);
-
+#endif
     void enablePreProcessorCallbacks();
 
     bool shouldIgnoreFile(clang::SourceLocation) const;
diff --git a/src/checks/level0/no-module-include.cpp b/src/checks/level0/no-module-include.cpp
index 0035e2a0..320d046d 100644
--- a/src/checks/level0/no-module-include.cpp
+++ b/src/checks/level0/no-module-include.cpp
@@ -56,7 +56,12 @@ void NoModuleInclude::VisitInclusionDirective(clang::SourceLocation HashLoc,
                                               clazy::OptionalFileEntryRef /*File*/,
                                               clang::StringRef /*SearchPath*/,
                                               clang::StringRef /*RelativePath*/,
+#if LLVM_VERSION_MAJOR >= 19
+                                              const clang::Module * /*SuggestedModule*/,
+                                              bool /*ModuleImported*/,
+#else
                                               const clang::Module * /*Imported*/,
+#endif
                                               clang::SrcMgr::CharacteristicKind /*FileType*/)
 {
     if (shouldIgnoreFile(HashLoc)) {
@@ -65,13 +70,20 @@ void NoModuleInclude::VisitInclusionDirective(clang::SourceLocation HashLoc,
 
     for (const std::string &module : m_modulesList) {
         if (module == "DBus") { // Avoid false positive for generated files
-            if (const clang::FileEntry *fileEntry = sm().getFileEntryForID(sm().getFileID(HashLoc))) {
+#if LLVM_VERSION_MAJOR >= 19
+#define GET_FILE_ENTRY_FOR_ID getFileEntryRefForID
+#define STARTS_WITH starts_with
+#else
+#define GET_FILE_ENTRY_FOR_ID getFileEntryForID
+#define STARTS_WITH startswith
+#endif
+            if (const auto fileEntry = sm().GET_FILE_ENTRY_FOR_ID(sm().getFileID(HashLoc))) {
                 llvm::StringRef fileName = fileEntry->getName();
                 llvm::ErrorOr<std::unique_ptr<llvm::MemoryBuffer>> fileBuffer = llvm::MemoryBuffer::getFile(fileName);
                 if (fileBuffer) {
                     llvm::StringRef fileContent = fileBuffer.get()->getBuffer();
-                    if (fileContent.startswith("/*\n * This file was generated by qdbusxml2cpp")
-                        || fileContent.startswith("/*\r\n * This file was generated by qdbusxml2cpp")) {
+                    if (fileContent.STARTS_WITH("/*\n * This file was generated by qdbusxml2cpp")
+                        || fileContent.STARTS_WITH("/*\r\n * This file was generated by qdbusxml2cpp")) {
                         continue;
                     }
                 }
diff --git a/src/checks/level0/no-module-include.h b/src/checks/level0/no-module-include.h
index 96e161c8..9f0a4b0a 100644
--- a/src/checks/level0/no-module-include.h
+++ b/src/checks/level0/no-module-include.h
@@ -33,7 +33,12 @@ public:
                                  clazy::OptionalFileEntryRef File,
                                  clang::StringRef SearchPath,
                                  clang::StringRef RelativePath,
+#if LLVM_VERSION_MAJOR >= 19
+                                 const clang::Module *SuggestedModule,
+                                 bool ModuleImported,
+#else
                                  const clang::Module *Imported,
+#endif
                                  clang::SrcMgr::CharacteristicKind FileType) override;
 
 private:
diff --git a/src/checks/level0/qcolor-from-literal.cpp b/src/checks/level0/qcolor-from-literal.cpp
index c9370e86..e874eb18 100644
--- a/src/checks/level0/qcolor-from-literal.cpp
+++ b/src/checks/level0/qcolor-from-literal.cpp
@@ -25,6 +25,12 @@ class ClazyContext;
 using namespace clang;
 using namespace clang::ast_matchers;
 
+#if LLVM_VERSION_MAJOR >= 19
+#define STARTS_WITH starts_with
+#else
+#define STARTS_WITH startswith
+#endif
+
 static bool isSingleDigitRgb(llvm::StringRef ref)
 {
     return ref.size() == 4;
@@ -48,7 +54,7 @@ static bool isQuadrupleDigitRgb(llvm::StringRef ref)
 
 static bool isStringColorLiteralPattern(StringRef str)
 {
-    if (!str.startswith("#")) {
+    if (!str.STARTS_WITH("#")) {
         return false;
     }
     return isSingleDigitRgb(str) || isDoubleDigitRgb(str) || isDoubleDigitRgba(str) || isTripleDigitRgb(str) || isQuadrupleDigitRgb(str);
@@ -76,7 +82,7 @@ public:
         }
 
         llvm::StringRef str = lt->getString();
-        if (!str.startswith("#")) {
+        if (!str.STARTS_WITH("#")) {
             return;
         }
 
diff --git a/src/checks/manuallevel/qt6-deprecated-api-fixes.cpp b/src/checks/manuallevel/qt6-deprecated-api-fixes.cpp
index e963c20f..c200051f 100644
--- a/src/checks/manuallevel/qt6-deprecated-api-fixes.cpp
+++ b/src/checks/manuallevel/qt6-deprecated-api-fixes.cpp
@@ -491,7 +491,12 @@ void Qt6DeprecatedAPIFixes::fixForDeprecatedOperator(Stmt *stmt, const std::stri
             }
             auto *uni = dyn_cast<UnaryOperator>(child);
             if (uni) {
-                if (clang::UnaryOperator::getOpcodeStr(uni->getOpcode()).equals("*")) {
+#if LLVM_VERSION_MAJOR >= 19
+#define STRING_EQUALS(a, b) a == b
+#else
+#define STRING_EQUALS(a, b) a.equals(b)
+#endif
+                if (STRING_EQUALS(clang::UnaryOperator::getOpcodeStr(uni->getOpcode()), "*")) {
                     isPointer = true;
                 }
             }
diff --git a/src/checks/manuallevel/qt6-fwd-fixes.cpp b/src/checks/manuallevel/qt6-fwd-fixes.cpp
index 7296f20e..ecf49599 100644
--- a/src/checks/manuallevel/qt6-fwd-fixes.cpp
+++ b/src/checks/manuallevel/qt6-fwd-fixes.cpp
@@ -157,7 +157,12 @@ void Qt6FwdFixes::VisitInclusionDirective(clang::SourceLocation HashLoc,
                                           clazy::OptionalFileEntryRef /*File*/,
                                           clang::StringRef /*SearchPath*/,
                                           clang::StringRef /*RelativePath*/,
+#if LLVM_VERSION_MAJOR >= 19
+                                          const clang::Module * /*SuggestedModule*/,
+                                          bool /*ModuleImported*/,
+#else
                                           const clang::Module * /*Imported*/,
+#endif
                                           clang::SrcMgr::CharacteristicKind /*FileType*/)
 {
     auto current_file = m_sm.getFilename(HashLoc);
diff --git a/src/checks/manuallevel/qt6-fwd-fixes.h b/src/checks/manuallevel/qt6-fwd-fixes.h
index c70f5504..73c88b56 100644
--- a/src/checks/manuallevel/qt6-fwd-fixes.h
+++ b/src/checks/manuallevel/qt6-fwd-fixes.h
@@ -38,7 +38,12 @@ public:
                                  clazy::OptionalFileEntryRef File,
                                  clang::StringRef SearchPath,
                                  clang::StringRef RelativePath,
+#if LLVM_VERSION_MAJOR >= 19
+                                 const clang::Module *SuggestedModule,
+                                 bool ModuleImported,
+#else
                                  const clang::Module *Imported,
+#endif
                                  clang::SrcMgr::CharacteristicKind FileType) override;
     bool m_including_qcontainerfwd = false;
     std::set<clang::StringRef> m_qcontainerfwd_included_in_files;
diff --git a/src/checks/manuallevel/qt6-header-fixes.cpp b/src/checks/manuallevel/qt6-header-fixes.cpp
index e10f9636..bc347cc0 100644
--- a/src/checks/manuallevel/qt6-header-fixes.cpp
+++ b/src/checks/manuallevel/qt6-header-fixes.cpp
@@ -253,7 +253,12 @@ void Qt6HeaderFixes::VisitInclusionDirective(clang::SourceLocation HashLoc,
                                              clazy::OptionalFileEntryRef /*File*/,
                                              clang::StringRef /*SearchPath*/,
                                              clang::StringRef /*RelativePath*/,
+#if LLVM_VERSION_MAJOR >= 19
+                                             const clang::Module * /*SuggestedModule*/,
+                                             bool /*ModuleImported*/,
+#else
                                              const clang::Module * /*Imported*/,
+#endif
                                              clang::SrcMgr::CharacteristicKind /*FileType*/)
 {
     if (shouldIgnoreFile(HashLoc)) {
diff --git a/src/checks/manuallevel/qt6-header-fixes.h b/src/checks/manuallevel/qt6-header-fixes.h
index d21440df..c7a52fb4 100644
--- a/src/checks/manuallevel/qt6-header-fixes.h
+++ b/src/checks/manuallevel/qt6-header-fixes.h
@@ -37,7 +37,12 @@ public:
                                  clazy::OptionalFileEntryRef File,
                                  clang::StringRef SearchPath,
                                  clang::StringRef RelativePath,
+#if LLVM_VERSION_MAJOR >= 19
+                                 const clang::Module *SuggestedModule,
+                                 bool ModuleImported,
+#else
                                  const clang::Module *Imported,
+#endif
                                  clang::SrcMgr::CharacteristicKind FileType) override;
 };
 
-- 
GitLab

